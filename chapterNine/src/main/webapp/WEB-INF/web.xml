<?xml version="1.0" encoding="UTF-8"?>
<web-app id="struts_blank" version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  <display-name>[Chapter 9] Integrating with Spring and Hibernate/JPA</display-name>

  <!-- Declaration of the Struts 2 filter.  Since our entire web application will be a Struts 2
        application, we will not have any other servlets or filters.  Of course, real Struts 2 
        applications may also have other servlets or filters, but since we are doing only Struts 2
        stuff in this example, we need only define the Struts 2 filter.  -->
        
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>
      org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter
    </filter-class>
  </filter>

  <!--  This filter is used with the Spring support for Java Persistence API (JPA)
    			This is only necessary for the JPA integration that starts with the Chapter Nine
    			version of the sample application.
     -->
    
  <filter>
      <filter-name>SpringOpenEntityManagerInViewFilter</filter-name>
      <filter-class>
          org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
      </filter-class>
  </filter>

  <filter-mapping>
      <filter-name>SpringOpenEntityManagerInViewFilter</filter-name>
      <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- The Struts 2 filter should be mapped to ALL requests coming into the web application.  As a filter,
        it can let the non-struts requests pass through and they will arrive at which ever servlets to which
        they may be mapped.  Of course, this sample app has no other servlets, so we expect the filter to catch 
        everything.  When the filter recognizes a Struts 2 request, typically by the .action extension, the 
        normal filter chaining of a web application is aborted and the request is completely handled by
        the Struts 2 system. -->

  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--  This listener is deployed in conjunction with the Spring plugin to enable the spring object
        factory and the autowiring interceptors.  This only necessary starting with the Chapter Nine
        version of the application, where Spring IoC is introduced.
  --> 
  <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
</web-app>
